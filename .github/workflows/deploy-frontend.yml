name: Deploy Frontend to S3 and CloudFront

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  workflow_dispatch: # 수동 실행 허용

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET: field-frontend-prod # S3 버킷 이름 (생성 필요)
  CLOUDFRONT_DISTRIBUTION_ID: E1234567890ABC # CloudFront Distribution ID (생성 필요)

jobs:
  build-and-deploy:
    name: Build and Deploy to S3
    runs-on: ubuntu-latest
    
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Node.js 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # 3. 의존성 설치
      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      # 4. React 앱 빌드
      - name: Build React app
        env:
          VITE_API_URL: https://new-api.iefield.com # 프로덕션 API URL
          NODE_ENV: production
        run: |
          cd frontend
          npm run build

      # 5. AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 6. S3에 파일 업로드
      - name: Deploy to S3
        run: |
          cd frontend/dist
          aws s3 sync . s3://${{ env.S3_BUCKET }} \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "index.html" \
            --exclude "*.html"
          
          # HTML 파일은 캐시 없이 업로드
          aws s3 sync . s3://${{ env.S3_BUCKET }} \
            --cache-control "no-cache, no-store, must-revalidate" \
            --exclude "*" \
            --include "*.html"

      # 7. CloudFront 캐시 무효화
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      # 8. 배포 완료 알림
      - name: Deployment notification
        if: success()
        run: |
          echo "✅ Frontend 배포 성공!"
          echo "S3 버킷: ${{ env.S3_BUCKET }}"
          echo "커밋: ${{ github.sha }}"
          echo "브랜치: ${{ github.ref_name }}"
          echo "배포 시간: $(date)"
          echo "배포 URL: https://iefield.com"

      # 9. 배포 실패 알림
      - name: Deployment failure notification
        if: failure()
        run: |
          echo "❌ Frontend 배포 실패!"
          echo "브랜치: ${{ github.ref_name }}"
          echo "커밋: ${{ github.sha }}"

      # 10. Lighthouse CI (선택 사항 - 성능 측정)
      # - name: Run Lighthouse CI
      #   uses: treosh/lighthouse-ci-action@v10
      #   with:
      #     urls: https://iefield.com
      #     uploadArtifacts: true

